{
  "project": "Fractional",
  "description": "A Hedera-based platform for creating, fractionalizing, and earning dividends on digital assets.",
  "version": "1.0",
  "checklist": {
    "core_setup": [
      {
        "task": "Setup environment variables (.env) with Hedera operator credentials",
        "status": "done",
        "notes": "Includes OPERATOR_ID, OPERATOR_KEY, HEDERA_NETWORK, MIRROR_NODE_URL."
      },
      {
        "task": "Initialize Hedera SDK and ethers provider",
        "status": "done",
        "notes": "Client configured with correct network and credentials."
      },
      {
        "task": "Configure database (Postgres / decentralized HFS)",
        "status": "in-progress",
        "notes": "Plan to migrate off Postgres into Hedera File Service or IPFS."
      }
    ],
    "user_flows": [
      {
        "task": "User wallet connect via HashConnect",
        "status": "done",
        "notes": "Wallet connection working and session state stored."
      },
      {
        "task": "User can view all available fractional assets",
        "status": "done",
        "notes": "Frontend fetches assets and displays from DB or mirror node."
      },
      {
        "task": "User can create new asset via backend",
        "status": "in-progress",
        "notes": "Operator mints NFT, transfers to user wallet for ownership verification."
      },
      {
        "task": "User can fractionalize an existing NFT",
        "status": "pending",
        "notes": "Detect user-owned NFTs and deploy DividendDistributor with them."
      },
      {
        "task": "User can buy shares (FT tokens) of existing assets",
        "status": "pending",
        "notes": "Requires frontend purchase form and backend FT transfer logic."
      },
      {
        "task": "User can claim dividends from Distributor contract",
        "status": "pending",
        "notes": "Integrate claimHbar() and claimTokens() calls."
      }
    ],
    "smart_contracts": [
      {
        "task": "Compile and deploy DividendDistributor.sol via ethers",
        "status": "done",
        "notes": "Deployed manually on testnet using ethers, verified on HashScan."
      },
      {
        "task": "Automate contract deployment via backend ethers integration",
        "status": "done",
        "notes": "Replaced SDK with deployDividendDistributorEthers helper."
      },
      {
        "task": "Map deployed EVM address to Hedera contract ID",
        "status": "in-progress",
        "notes": "Conversion required for SDK interactions (ContractId.fromEvmAddress)."
      },
      {
        "task": "Associate fraction token with Distributor contract",
        "status": "pending",
        "notes": "Requires valid contract ID and FT token ID."
      }
    ],
    "frontend": [
      {
        "task": "Build Create Asset form",
        "status": "done",
        "notes": "Collects asset name, description, total shares, image, etc."
      },
      {
        "task": "Add confirmation screen with HashScan links",
        "status": "in-progress",
        "notes": "Show NFT, FT, and contract IDs after creation."
      },
      {
        "task": "Implement Asset Details page with claim/reward options",
        "status": "pending",
        "notes": "Allow users to see dividends and interact with contract."
      }
    ],
    "integrations": [
      {
        "task": "Pin metadata to IPFS",
        "status": "done",
        "notes": "uploadMetadataToIpfs() working with Pinata or Web3.storage."
      },
      {
        "task": "Store metadata JSON reference on HFS",
        "status": "in-progress",
        "notes": "storeJsonInHfs() implemented, still testing immutability."
      },
      {
        "task": "HashScan explorer links integrated",
        "status": "done",
        "notes": "Frontend displays links for NFT, FT, contract, and transactions."
      }
    ]
  }
}
